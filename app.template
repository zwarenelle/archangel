########################
# General properties
########################
# Enable CORS for runQuickstartsFromSource.sh
quarkus.http.cors=true
quarkus.http.cors.origins=/http://localhost:.*/
# Allow all origins in dev-mode
%dev.quarkus.http.cors.origins=/.*/

########################
# Demo properties
########################

# Toggle demo data: TRUE, FALSE (keep in sync with quarkus.hibernate-orm.database.generation)
schedule.demoData=FALSE

########################
# Timefold properties
########################

# The solver runs for 30 seconds. To run for 5 minutes use "5m" and for 2 hours use "2h".
quarkus.timefold.solver.termination.spent-limit=30s

# To change how many solvers to run in parallel (Timefold Enterprise only)
# timefold.solver-manager.parallel-solver-count=4
# To run increase CPU cores usage per solver
# quarkus.timefold.solver.move-thread-count=2

# Temporary comment this out to detect bugs in your code (lowers performance)
# quarkus.timefold.solver.environment-mode=FULL_ASSERT
# To see what Timefold is doing, turn on DEBUG or TRACE logging.
quarkus.log.category."ai.timefold.solver".level=DEBUG
%test.quarkus.log.category."ai.timefold.solver".level=INFO
%prod.quarkus.log.category."ai.timefold.solver".level=INFO

# XML file for power tweaking, defaults to solverConfig.xml (directly under src/main/resources)
# quarkus.timefold.solver-config-xml=org/.../maintenanceScheduleSolverConfig.xml

########################
# Database properties
########################

# Panache
# configure your datasource
quarkus.datasource.db-kind = mariadb
quarkus.datasource.username = <<USERNAME>>
quarkus.datasource.password = <<PASSWORD>>
quarkus.datasource.jdbc.url = jdbc:mariadb://localhost:<<PORT>>/<<DATABASE>>

# drop and create the database at startup (use `update` to only update the schema, 'drop-and-create' to generate DemoData again)
quarkus.hibernate-orm.database.generation = drop-and-create

########################
# Test overrides
########################

%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:maintenance-scheduling

# Effectively disable spent-time termination in favor of the best-score-limit
%test.quarkus.timefold.solver.termination.spent-limit=1h
%test.quarkus.timefold.solver.termination.best-score-limit=0hard/*soft

########################
# Native overrides
########################

# In pom.xml, the "native" maven profile triggers the "native" quarkus profile.
%native.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:maintenance-scheduling